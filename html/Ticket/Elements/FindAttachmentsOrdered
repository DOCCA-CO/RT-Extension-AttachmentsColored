<%init>
return undef unless $Ticket && ref $Ticket eq 'RT::Ticket' && $Ticket->id;

use utf8;

$Attachments ||= $Ticket->Attachments;

# Avoid applying limits to this collection that may be used elsewhere
# (e.g. transaction display)
$Attachments = $Attachments->Clone;

# Remember, each message in a transaction is an attachment; we only
# want named attachments (real files)
$Attachments->LimitHasFilename;

# show newest first
$Attachments->OrderByCols(
    { FIELD => 'Created', ORDER => 'DESC' },
    { FIELD => 'id',      ORDER => 'DESC' },
);


my %documents;
while ( my $attach = $Attachments->Next() ) {
  next unless ($attach->Filename);

  # név, kategória, dátum unix, dátum human readable, feltöltő, méret byte-ban, méret human readable, style tag, attachment obj
  $documents{$attach->id}{'trid'} = $attach->TransactionId;
  $documents{$attach->id}{'filename'} = $attach->Filename;
  my $catt = ($attach->FirstAttribute('Category')?$attach->FirstAttribute('Category')->Content:'X');
  my $node = ($attach->FirstAttribute('Folder')?$attach->FirstAttribute('Folder')->Content:'');
  $documents{$attach->id}{'category'} = $catt;
  $documents{$attach->id}{'node'} = $node;
  $documents{$attach->id}{'date_unix'} = $attach->CreatedObj->Unix;
  $documents{$attach->id}{'date'} = $attach->CreatedAsString;
  $documents{$attach->id}{'creator'} = $attach->CreatorObj->Name;
  my $size = $attach->ContentLength;
  $documents{$attach->id}{'size_byte'} = $size || 0;
  if($size)  {
    my $kb = int($size/102.4) / 10;
    my $units = RT->Config->Get('AttachmentUnits');
    if (!defined($units)) {
      if ($size > 1024) {
        $size = $kb . "k";
      } else  {
        $size = $size . "b";
      }
    } elsif($units eq 'k') {
      $size = $kb . "k";
    } else  {
      $size = $size . "b";
    }
  }
  $documents{$attach->id}{'size'} = $size;
  my %colormap = RT->Config->Get('AttachmentCategories');
  my $style = $colormap{$catt} if $colormap{$catt};
  $documents{$attach->id}{'style'} = $style;
  $documents{$attach->id}{'attachment'} = $attach;
  $documents{$attach->id}{'comment'} = ($attach->FirstAttribute('Comment')?$attach->FirstAttribute('Comment')->Content:'');
}

my $AttachmentOrder = ($Ticket->FirstAttribute('User-'. $session{'CurrentUser'}->id. '-AttachmentOrder')?$Ticket->FirstAttribute('User-'. $session{'CurrentUser'}->id. '-AttachmentOrder')->Content:'default');

my @retarr;
# - filename: fajlnev (lc abc), datum (cba)
if($AttachmentOrder eq 'filename')  {
  foreach my $key (sort {lc $documents{$a}{'filename'} cmp lc $documents{$b}{'filename'} || $documents{$b}{'date_unix'} <=> $documents{$a}{'date_unix'}} keys %documents)  {
    push @retarr, $documents{$key};
  }
# - category: category (lc abc), datum (cba)
} elsif($AttachmentOrder eq 'category')  {
  foreach my $key (sort {lc $documents{$a}{'category'} cmp lc $documents{$b}{'category'} || $documents{$b}{'date_unix'} <=> $documents{$a}{'date_unix'}} keys %documents)  {
    push @retarr, $documents{$key};
  }
# - user: usernev (lc abc), datum (cba)
} elsif($AttachmentOrder eq 'user')  {
  foreach my $key (sort {lc $documents{$a}{'creator'} cmp lc $documents{$b}{'creator'} || $documents{$b}{'date_unix'} <=> $documents{$a}{'date_unix'}} keys %documents)  {
    push @retarr, $documents{$key};
  }
# - size: size (abc), datum (cba)
} elsif($AttachmentOrder eq 'size')  {
  foreach my $key (sort {lc $documents{$a}{'size_byte'} <=> lc $documents{$b}{'size_byte'} || $documents{$b}{'date_unix'} <=> $documents{$a}{'date_unix'}} keys %documents)  {
    push @retarr, $documents{$key};
  }
} elsif ($AttachmentOrder eq 'node') {
    foreach my $key (sort {lc $documents{$a}{'node'} <=> lc $documents{$b}{'node'} || $documents{$b}{'date_unix'} <=> $documents{$a}{'date_unix'}} keys %documents)  {
    push @retarr, $documents{$key};
  }
}
  elsif ($AttachmentOrder eq 'comment')  {
  foreach my $key (sort {lc $documents{$a}{'comment'} cmp lc $documents{$b}{'comment'} || $documents{$b}{'date_unix'} <=> $documents{$a}{'date_unix'}} keys %documents)  {
    push @retarr, $documents{$key};
  }
# - default: datum (cba), fajlnev (lc abc)
} else  {
  foreach my $key (sort {$documents{$b}{'date_unix'} <=> $documents{$a}{'date_unix'} || lc $documents{$a}{'filename'} cmp lc $documents{$b}{'filename'}} keys %documents)  {
    push @retarr, $documents{$key};
  }
}

return(\@retarr);
</%init>

<%args>
$Ticket => undef
$Attachments => undef
</%args>
