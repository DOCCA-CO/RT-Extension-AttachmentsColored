%# BEGIN BPS TAGGED BLOCK {{{
%#
%# COPYRIGHT:
%#
%# This software is Copyright (c) 1996-2018 Best Practical Solutions, LLC
%#                                          <sales@bestpractical.com>
%#
%# (Except where explicitly superseded by other copyright notices)
%#
%#
%# LICENSE:
%#
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%#
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%#
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%#
%#
%# CONTRIBUTION SUBMISSION POLICY:
%#
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%#
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%#
%# END BPS TAGGED BLOCK }}}

<!-- NEW TICKET -->
<div class="modal fade" id="myModal" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel"><&|/l&>New ticket</&></h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <form>
          <div class="form-group">
            <label class="col-form-label"><%loc('Subject')%>:</label>
            <input type="text" name="subj" id="subj" class="form-control" />
          </div>
          <div class="form-group">
            <label class="col-form-label"><%loc('Queue')%>:</label>
% my $queue_selector = $m->scomp('/Elements/SelectNewTicketQueue', Name => 'Queue1', AutoSubmit => 0, Placeholder => loc('Queue') );
<% $queue_selector |n %>
          </div>
          <div class="form-group">
            <label class="col-form-label"><%loc('User')%>:</label>
% my $user_selector = $m->scomp('/Elements/SelectOwner', Name => 'Owner1', DefaultValue => 0, Default => $session{'CurrentUser'}->id );
<% $user_selector |n %>
          </div>
          <div class="form-group">
            <label for="message-text" class="col-form-label"><&|/l&>Message</&>:</label>
            <textarea class="form-control" id="message-text1"></textarea>
%#            <span><&|/l&>Attachments</&>:</span>
            <span id="att_list"></span>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal"><&|/l&>Close</&></button>
        <button type="button" class="btn btn-primary" id="send1"><&|/l&>Create ticket</&></button>
      </div>
    </div>
  </div>
</div>
<!-- /NEW TICKET -->

<!-- COMMENT TO TICKET -->
<div class="modal fade" id="myModal2" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel"><&|/l&>Comment</&></h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <form>
          <div class="form-group">
            <label class="col-form-label"><%loc('Ticket id')%>:</label>
            <input type="text" class="form-control" id="ticketid">
          </div>
          <div class="form-group">
            <label for="message-text" class="col-form-label"><&|/l&>Message</&>:</label>
            <textarea class="form-control" id="message-text2"></textarea>
%#            <span><&|/l&>Attachments</&>:</span>
            <span id="att_list2"></span>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal"><&|/l&>Close</&></button>
        <button type="button" class="btn btn-primary" id="send2"><&|/l&>Comment</&></button>
      </div>
    </div>
  </div>
</div>
<!-- /COMMENT TO TICKET -->

<&| /Widgets/TitleBox, title => loc('Attachments'), 
		title_class=> 'inverse',  
		class => 'ticket-info-attachments',
		color => "#336699",
		hide_chrome => $HideTitleBox &>

% $m->callback( %ARGS, CallbackName => 'BeforeList', TicketObj => $Ticket, Attachments => $Attachments, Documents => \%documents, IsChecked => \%is_checked, ShowMore => \$show_more );

<!-- <table id="attachments" class="display nowrap" width="100%"> -->
<table id="attachments" class="table table-striped table-bordered table-hover nowrap" width="100%">
	<thead>
		<tr>
%#			<th></th>
			<th><input type='checkbox' id='checkAll' onclick='checkAllClick(this);' /></th>
			<th><&|/l&>Category</&></th>
			<th><&|/l&>Filename</&></th>
			<th><&|/l&>Date</&></th>
			<th><&|/l&>User</&></th>
			<th><&|/l&>Size</&></th>
			<th><&|/l&>Node</&></th>
			<th><&|/l&>comment</&></th>
		</tr>
	</thead>
<!--
	<tfoot>
		<tr>
			<th><&|/l&>Category</&></th>
			<th><&|/l&>Filename</&></th>
			<th><&|/l&>Date</&></th>
			<th><&|/l&>User</&></th>
			<th><&|/l&>Size</&></th>
			<th><&|/l&>Node</&></th>
			<th><&|/l&>comment</&></th>
		</tr>
	</tfoot>
//-->

</table>


<script src="<%$RT::WebPath%>/NoAuth/js/jquery.dataTables.min.js" type="text/javascript"></script>
<script src="<%$RT::WebPath%>/NoAuth/js/dataTables.bootstrap4.min.js" type="text/javascript"></script>
<script src="<%$RT::WebPath%>/NoAuth/js/file-size.js" type="text/javascript"></script>
<script src="<%$RT::WebPath%>/NoAuth/js/dataTables.select.min.js" type="text/javascript"></script>
<!-- <script src="<%$RT::WebPath%>/NoAuth/js/datetime-moment.js" type="text/javascript"></script> -->
<!-- <script src="<%RT->Config->Get('WebPath')%>/NoAuth/js/dataTables.responsive.min.js" type="text/javascript"></script> -->
<script src="<%RT->Config->Get('WebPath')%>/NoAuth/js/dataTables.buttons.min.js" type="text/javascript"></script>

<!-- download zip -->
<script src="<%RT->Config->Get('WebPath')%>/NoAuth/js/jszip.min.js" type="text/javascript"></script>
<script src="<%RT->Config->Get('WebPath')%>/NoAuth/js/jszip-utils.min.js" type="text/javascript"></script>
<script src="<%RT->Config->Get('WebPath')%>/NoAuth/js/FileSaver.min.js" type="text/javascript"></script>

<script type="text/javascript">

	var colors = <%to_json(\%colormap, {canonical=>1})|n%>;
	var dt, result;
	var bShowHide = false;

	jQuery(function ($) {
		$(document).ready( function () {

			function formatResult(node) {
				var $result = $('<span title="' + node.lib  + '" style="padding-left:' + (20 * (node.level-1)) + 'px;">' + '<img src="<%RT->Config->Get('WebPath')%>/static/images/icons8-folder-16.png"> ' + node.text + '</span>');
				return $result;
			};

			result = $.ajax({
				type: "POST",
				url: "<%RT->Config->Get('WebPath')%>/Ajax/LoadAttachments.json",
				data: { 'ticketId': '<%$Ticket->Id%>' },
				success: function(data) {
					dt = $('#attachments').DataTable({
						language: {
							url: '<%$RT::WebPath%>/NoAuth/js/Hungarian.json'
						},
						pageLength: 100,
						lengthMenu: [ [10, 25, 50, 100, -1], [10, 25, 50, 100, "<&|/l&>All</&>"] ],
						dom: 'Bl<"__toolbar">frtip',
						initComplete: function() {
%#							$("div.__toolbar").html('&nbsp;&nbsp;<button type="button" class="btn btn-outline-primary" id="newTicket" onclick="newTicketClick();"><&|/l&>Add to new ticket</&></button> <button type="button" class="btn btn-outline-dark" id="okTicket" onclick="okTicketClick();"><&|/l&>Add to existing ticket</&></button>&nbsp;&nbsp;<label><input id="showhide" name="showhide" type="checkbox" value="1" onclick="hiddenShowHide( this.checked ); console.log( \'check box \' + this.checked); return true;">&nbsp;<&|/l&>Show hidden files</&></label>');
							$("div.__toolbar").html('&nbsp;&nbsp;&nbsp;&nbsp;<label><input id="showhide" name="showhide" type="checkbox" value="1" onclick="hiddenShowHide( this.checked ); console.log( \'check box \' + this.checked); return true;">&nbsp;<&|/l&>Show hidden files</&></label>');
							//$("div.__toolbar").css( 'margin-top', '3px' );
							//$("div.__toolbar").css( 'display', 'inline-block' );
							//$("div.__toolbar").css( 'padding-left', '16px' );
							//$("div.__toolbar").css( 'line-height', '25px' );
							//$("div.__toolbar").css( 'text-align', 'center' );
						},
						buttons: [
							{
							    text: "<&|/l&>Add to new ticket</&>",
							    action: function( e, t, node, config ) {
								var links = [];
								$('input[name="att"]:checked').each(function() {
								    links.push($(this).attr('value'));
								});
								if (links.length === 0) return;
								console.log(links.join(','));
								$('#myModal').appendTo("body").modal('show');
								$('#send1').click(function() {
								    $.ajax({
									url: '<%$RT::WebPath%>/Ajax/AddNewTicket',
									type: 'POST',
									data: { 'submit':true, 'subj': $('#subj').val(), 'queue': $('select[name="Queue1"]').val(), 'owner': jQuery('#Owner1').val(), 'message': $('#message-text1').val(), 'attlist': links.join(',')  }, // An object with the key 'submit'
									success: function (result) {
									    $.jGrowl(result, { themeState: 'none' });
									    location.reload();
									}
								    });
								    $('#myModal').appendTo("body").modal('hide');
								});
							    }
							},
							{
							    text: "<&|/l&>Add to existing ticket</&>",
							    action: function( e, t, node, config ) {
								var links = [];
								$('input[name="att"]:checked').each(function() {
								    links.push($(this).attr('value'));
								});
								if (links.length === 0) return;
								console.log(links.join(','));
								$('#myModal2').appendTo("body").modal('show');
								$('#send2').click(function() {
								    $.ajax({
									url: '<%$RT::WebPath%>/Ajax/AddToTicket',
									type: 'POST',
									data: { 'submit':true, 'id': $('#ticketid').val(), 'message': $('#message-text2').val() + '<br />', 'attlist': links.join(',') }, // An object with th
									success: function (result) {
									    $.jGrowl(result, { themeState: 'none' });
									    location.reload();
									}
								    });
								    $('#myModal2').appendTo("body").modal('hide');
								});
							    }
							},
							{
							    text: "<&|/l&>Download</&>",
							    action: function( e, t, node, config ) {
									var links = [];
									var data = dt.rows({selected:  true}).data();
									var zip = new JSZip();
									var count = 0;
									var zipFilename = "doxAttachments.zip";
									$('input[name="att"]:checked').each(function() {
										links.push($(this).data('link'));
									});
%#									for (i=0; i<data.length; i++) {
%#									    links.push(data[i].checkbox);
%#									}
									console.log(links);
									switch (true) {
										case (2 <= links.length):
											links.forEach(function(url, i) {
												var filename = url.split('/').pop();
												JSZipUtils.getBinaryContent(url, function (err, dat) {
												if (err) {
													throw err; // or handle the error
												}
												zip.file(filename, dat, { binary: true });
												count++;
												if (count == links.length) {
													zip.generateAsync({ type: 'blob' }).then(function (content) {
													saveAs(content, zipFilename);
													});
												}
												});
											});
											break;
										case (1 == links.length):
											const filename = links[0].split('/').pop();
											fetch(links[0])
												.then(response => response.blob())
													.then(blob => {
														const url = window.URL.createObjectURL(blob);
														const a = document.createElement('a');
														a.href = url;
														a.download = filename;
														a.click();
														window.URL.revokeObjectURL(url);
													});
											break;
										default: 
											console.log('No links selected');
									}
								}
							}],
						data: data.attachments,
						drawCallback: function( row, dataIndex ) {
							$('.selectnode').select2({
								placeholder: '<&|/l&>Select an option</&>',
								width: "230px",
								data: data.folders,
								formatSelection: function(item) {
									return item.text
								},
								formatResult: function(item) {
									return item.text
								},
								templateResult: formatResult,
								dropdownCssClass : 'bigdrop',
								dropdownAutoWidth : true
							});
						},
						createdRow: function( row, data, dataIndex ) {
							if (data['category'] != 'X') {
								$(row).css( 'background-color', colors[data['category']] );
							};
							if ( (data['category'] == "hidden" ) && ( $('#showhide').val() != '1') ) {
								$(row).hide();
							};
						},
						columns: [
%#							{ "data":"checkbox", visible:false, orderable: false },
							{ "data": null, "defaultContent": "","orderable": false,
							"fnCreatedCell": function (nTd, sData, oData, iRow, iCol) {
								$(nTd).html( "<input type='checkbox' name='att' value='"+oData.attid+"' data-link='"+oData.checkbox+"' />" );
							}},
							{ "data":"category",
		                    	//"orderable": false,
							"fnCreatedCell": function (nTd, sData, oData, iRow, iCol) {
								var rgroup = "";
								for (var key in colors) {
									rgroup += "<label class='__container'>";
									rgroup += "<input type='radio' onchange='setCategory(" + iRow + ","  + iCol + ", this.name, this.value);' name='rad" + oData.attid + "' id='rad-" + oData.attid + "-" + key + "' value='" + key +"'";
									rgroup += (key == sData)?" checked":"";
									rgroup += ">";
									rgroup += "<span class='checkmark' style='background-color: " + colors[key] + "'></span>";
									rgroup += "</label>";
									// rgroup += "<div style='width:15px; height:15px; padding-right:3px; " + colors[key] + "'></div>";
								}
									//&#x2612;
								rgroup += "<label style='display: inline-block;	position: relative; margin-bottom: 20px;'>";
								rgroup += "<span id='del" + oData.attid + "' style='position:absolute; width:21px; height:20px; border:1px solid; border-radius:3px; background-color:#eee; text-align:center; line-height:20px; cursor:pointer;' onclick='delCategory("+iRow+", this.id); return true;'>X</span>";
								rgroup += "</label>";
								rgroup += "";
								$(nTd).css( 'width', '180px' );
								$(nTd).html( rgroup );
								return oData.attid;
							}},
							{ "data":"filename" },
							{ "data":"date_unix",
								"fnCreatedCell": function (nTd, sData, oData, iRow, iCol) {
									$(nTd).text( oData.date );
								}
							},
							{ "data":"creator" },
							{ "data":"size" },
							{ "data":"node" ,
								"fnCreatedCell": function (nTd, sData, oData, iRow, iCol) {
									$(nTd).html( "<select class='selectnode' style='width:200px;' id='sel-" + oData.attid + "' onchange='setFolder(this.id, this.value);'><option></option></select>" );
								}
							},
							{ "data":"comment",
								"fnCreatedCell": function (nTd, sData, oData, iRow, iCol) {
									$(nTd).html( "<span style='display:none'>"+sData+"</span><input style='border-style:none; padding: 5px; width: 150px;' id=comm-" + oData.attid + " type='text' onfocusout='saveComment(this.id, this.value);' value='" + sData + "' disabled>&nbsp;<img style='cursor:pointer; padding-left: 5px;' onclick='editComment( \"comm-"+oData.attid+"\" );' src=\"<%RT->Config->Get('WebPath')%>/static/images/pencil-icon.png\">" );
								}
							}],
						columnDefs: [
%#								{ orderable: false, className: 'select-checkbox', targets: 0 },
								{ type: 'file-size', targets: 5 }
							],
%#				select: { 'style': 'multi' },
		                order: [ 3, 'asc' ],
					});
				}
			}).then(function (data) {
				$('.selectnode').each(function() {
					for (var i = 0; i < data.attachments.length; i++){
						if ( this.id == "sel-" + data.attachments[i].attid ) {
							$("#"+this.id).val(data.attachments[i].node);
							$("#"+this.id).trigger('change');
						}
					}
				});
			});
		});
    });

	function setCategory( row, cell, radio, value ) {
		//dt.cell({row:row, column:0}).data(value);
		jQuery(dt.row(row).node()).css( 'background-color', colors[value] );
		if (value == 'hidden') {
			if (!jQuery("#showhide").is(":checked")) {
				jQuery(dt.row(row).node()).hide();	
			}
		};
		//jQuery(dt.cell({row:row, column:0}).data(radio.replace("rad", "")).draw(false));
		//jQuery(dt.fnUpdate( radio.replace("rad", ""), row, cell, false ));
		jQuery.ajax({
			type: 'POST',
			url: '<%RT->Config->Get('WebPath')%>/Ajax/AjaxModifyCategory',
			data: {
				'Value' : value,
				'attachId' : radio.replace("rad", ""),
			}
		});
	};

	function delCategory( row, radio ) {
		//dt.cell({row:row, column:0}).data(value);
		jQuery.ajax({
			type: 'POST',
			url: '<%RT->Config->Get('WebPath')%>/Ajax/AjaxDeleteCategory',
			data: {
				'attachId'	: radio.replace("del", ""),
			},
			success:function(){
				var r = radio.replace("del", "rad-")
				jQuery("[id^="+r+"]").attr('checked', false);
				jQuery(dt.row(row).node()).css( 'background-color', '' );
				console.log(row, r, radio);
			}
		});
	};

	function setFolder( attID, node ) {
		jQuery.ajax({
			type: 'POST',
			url: '<%RT->Config->Get('WebPath')%>/Ajax/AjaxModifyFolder',
			data: {
				'Value' : node,
				'attachId' : attID.replace("sel-", "")
			}
		});
	}

	function hiddenShowHide( checked ) {
		dt.rows().every( function ( index ) {
			if (checked) {
				if (!jQuery(dt.row(index).node()).is(':visible')){
					jQuery(dt.row(index).node()).show();
				}
			} else {
				if (jQuery( dt.row(index).node() ).find("input[name^='rad']:checked").val() == 'hidden') {
					jQuery(dt.row(index).node()).hide();
				}
			}
		});
	}

	function editComment( editID ) {
		jQuery( "#"+editID ).prop( "disabled", false ).focus();
	}

	function saveComment ( editID, editVal ) {
		jQuery( "#"+editID ).prop( "disabled", true );
		jQuery.ajax({
			type: 'POST',
			url: '<%RT->Config->Get('WebPath')%>/Ajax/AjaxModifyComment',
			data: {
				'Value' : editVal,
				'attachId' : editID.replace("comm-", "")
			}
		});
	}

	function copyClipboard( aID ) {
	/* Get the text field */
		var copyText = document.getElementById(aID).getAttribute("href").replace('file:///','');
		/* Select the text field */
		document.addEventListener('copy', function(e) {
			e.clipboardData.setData('text/plain', copyText);
			e.preventDefault();
		}, true);

		/* Copy the text inside the text field */
		document.execCommand("copy");

		/* Alert the copied text */
		alert("Copied the text: " + copyText);
	}

	function sendOpenReqMQ( aID ) {
	/* Get the text field */
		var copyText = document.getElementById(aID).getAttribute("href").replace('file:///','');
		jQuery.ajax({
			type: 'POST',
			url: '<%RT->Config->Get('WebPath')%>/Ajax/AjaxSendMQOpen',
			data: {
				'queue' : '<% $session{'CurrentUser'}->Name %>',
				'attachment' : copyText
			}
		}).done(function( data ) {
			console.log( "Sent2MQ: " + data );
		});
		
	}

    function checkAllClick(cb) {
        jQuery('input[name="att"]:checkbox').not(cb).prop('checked', cb.checked);
    }

    function newTicketClick() {
        var links = [];
        jQuery('input[name="att"]:checked').each(function() {
            links.push(jQuery(this).attr('value'));
        });
        if (links.length === 0) return;
        console.log(links.join(','));
        jQuery('#myModal').appendTo("body").modal('show');
        jQuery('#send1').click(function() {
            jQuery.ajax({
                url: '<%$RT::WebPath%>/Ajax/AddNewTicket',
                type: 'POST',
                data: { 'submit':true, 'subj': jQuery('#subj').val(), 'queue': jQuery('select[name="Queue1"]').val(), 'owner': jQuery('#Owner1').val(), 'message': jQuery('#message-text1').val(), 'attlist': links.join(',')  }, // An object with the key 'submit'
                success: function (result) {
                    jQuery.jGrowl(result, { themeState: 'none' });
                    location.reload();
                }
            });
            jQuery('#myModal').appendTo("body").modal('hide');
        });
    }

    function okTicketClick() {
        var links = [];
        jQuery('input[name="att"]:checked').each(function() {
            links.push(jQuery(this).attr('value'));
        });
        if (links.length === 0) return;
        console.log(links.join(','));
        jQuery('#myModal2').appendTo("body").modal('show');
        jQuery('#send2').click(function() {
            jQuery.ajax({
                url: '<%$RT::WebPath%>/Ajax/AddToTicket',
                type: 'POST',
                data: { 'submit':true, 'id': jQuery('#ticketid').val(), 'message': jQuery('#message-text2').val() + '<br />', 'attlist': links.join(',') }, // An object with th
                success: function (result) {
                    jQuery.jGrowl(result, { themeState: 'none' });
                    location.reload();
                }
            });
            jQuery('#myModal2').appendTo("body").modal('hide');
        });
    }

</script>

</&>

<%INIT>
use utf8;
use JSON;

# If we haven't been passed in an Attachments object (through the precaching mechanism)
# then we need to find one
$Attachments ||= $Ticket->Attachments;

# Avoid applying limits to this collection that may be used elsewhere
# (e.g. transaction display)
$Attachments = $Attachments->Clone;

# Remember, each message in a transaction is an attachment; we only
# want named attachments (real files)
$Attachments->LimitHasFilename;

my $show_more = 0;
my %documents;
my %colormap = RT->Config->Get('AttachmentCategories');

# show newest first
$Attachments->OrderByCols(
	{ FIELD => 'Created', ORDER => 'DESC' },
	{ FIELD => 'id',      ORDER => 'DESC' },
);

while ( my $attach = $Attachments->Next() ) {
   # display "show more" only when there will be more attachments
   if (defined($Count) && --$Count < 0) {
	   $show_more = 1;
	   last;
   }
   push @{ $documents{ $attach->Filename } }, $attach;
}

my %is_checked = map { $_ => 1 } @Checked;

return if !$show_more && keys %documents == 0;
</%INIT>
<%ARGS>
$Ticket => undef
$Attachments => undef
$DisplayPath => $session{'CurrentUser'}->Privileged ? 'Ticket' : 'SelfService'
$HideTitleBox => 0
$Selectable => 0
$Count => undef
@Checked => ()
</%ARGS>

